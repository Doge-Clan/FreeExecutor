/*
  FreeExecutor 0.3
  (C) 2022 Doge Clan, Licensed under the LGPL 2.1 License
  ================================================================
  FreeExecutor 0.3 is a rewrite of FreeExecutor that fixes the poor code
  of previous versions and adds many new features (Better VFS, Greatly improved Terminal,
  GUI Boilerplate, Builtin Libraries, etc.)
  
  NOT COMPATIBLE WITH PREVIOUS VERSIONS (0.1.0 - 0.2.1)!!! 
*/

// Wrapper for FreeExecutor
function _run() {
  // JavaScript Extensions
  window.page = {
    url: window.location.href,
    isGoGuardian: window.location.href.includes('blocked.goguardian.com'), // One Common Inject Page, at least one designed for.
    isLocal: window.location.href.includes("C:") || window.location.href.indexOf('/') === 0 // Saved File (Windows/NT), Saved File (unix/unix like)
  };

  /*
    window.page is a new extension to the Window API that can be used to get various information
    on the injected page from a bookmarklet perspective
  */

  window.fe = {
    isTextMode: localStorage.getItem('fe_textmode') || true,
    isGraphicsMode: localStorage.getItem('fe_graphicsmode') || false,
    startupMsg: localStorage.getItem('fe_startupmsg') || "FreeExecutor 0.3<br>(C) 2022 Doge Clan, Licensed under LGPL 2.1 License",
    hostname: localStorage.getItem('fe_hostname') || "system",
  }

  /*
    window.fe is a new extension to the Window API that stores the state of FreeExecutor and its modes
    to be exposed to programs that need them. It is essentially a kernel state with GUI modes, etc.
  */

  window.fepkg = {
    installedPackages: ['base_fe-0.3', 'ujstools-0.3'], // Packages Installed
    installedCommands: ['clear', 'eval', 'fepkg', 'help'], // Used in the help command (To-do: Automate population of this)
    loadAnymousScript: function(packageName, src, isES6Module = false) {
      const elm = document.createElement('script');
      elm.src = src;
      if (isES6Module) { elm.type = 'module'; } // ES6 Module Fun
      
      document.body.appendChild(elm);
      
      window.fepkg.installedPackages.push(packageName);
      console.debug(`Sucessfully pushed anymous package ${packageName}`)
    } // Saves as a package (Persistance does not work yet due to lack of VFS)
  }

  /*
    window.fepkg is a new extension that holds default fepkg data (that is it for now)
  */
  
  // JavaScript onerror Hook (WIP)
  window.onerror = function(err) {
    throw err;
  }

  // JavaScript Console Hooks (for textMode + GUI)
  console.defaultLog = console.log.bind(console);
  console.logs = [];
  console.log = function(){
    // default &  console.log()
    console.defaultLog.apply(console, arguments);
    // new & array data
    console.logs.push(Array.from(arguments));
    // add to document.body
    if (window.fe.isTextMode) { 
      document.body.innerHTML += console.logs[console.logs.length - 1] + "<br>"; 
      window.scrollTo(0, document.body.scrollHeight);
    } // Get last log and add it if in textMode
  }; // console.log replacement function (errors are not supported yet)

  console.oldClear = console.clear;
  console.clear = function() {
    console.oldClear();
    if (window.fe.isTextMode) {
      document.body.innerHTML = "";
    }
  }; // console.clear replacement function

  console.newLine = function() {
    if (window.fe.isTextMode) {
      document.body.innerHTML += "<br>";
    }
  } // Adds <br> because it is too common to not be a function
  
  // Clean the Page out of old trash
  document.head.innerHTML = '<meta charset="UTF-8"><title>FreeExecutor 0.3</title>';
  document.body.innerHTML = '';
  
  // Load Default Stylesheet (JS for now, textMode)
  const style = document.body.style;
  style.margin = "0px";
  style.padding = "0px";
  style.userSelect = "none";
  style.background = "rgb(20, 20, 20)";
  style.color = "rgb(255, 255, 255)";
  style.fontFamily = "monospace";
  style.fontSize = "12px";
  style.overflowX = "hidden"; // for better text overflow (no left scroll, only vert.)

  // Setup Utility (Init Script)
  let fe_setup = localStorage.getItem('fe_setup');
  if (!fe_setup) {
    console.log('Welcome to FreeExecutor 0.3.');
    console.log('(C) 2022 Doge Clan, Licensed under the LGPL 2.1 License');
    console.log('');
  
    console.log('Setting Up Default Flags...');
      localStorage.setItem('fe_textmode', true);
      localStorage.setItem('fe_graphicsmode', false);
    console.log('Finishing Setup...');
      localStorage.setItem('fe_setup', true);
    console.log('Done!');
  
    console.clear();
  }

  // Command Parser (Links at window.fe, )
  window.fe.parseCommand = function(cmd) {
    // A Better, Attribute like system for the commands (better *nix compat. + Removes need for .includes() or regex searches)
    let attrib = cmd;
    if (attrib.charAt(0) === " ") {
      attrib = attrib.subString(0); // Remove first character so we don't split it
    }
  
    attrib = attrib.split(" ");
  
    // Command Search
    switch(attrib[0]) {
      case '':
        console.newLine();
        break; // Like most terminals so we don't get errors without any command
        
      case 'clear':
        console.clear();
        break; // Clear the console
      
      case 'man':
        console.log('<br>Manual pages are not done yet, sad.')
        break; // POSIX manual command replica
      
      case 'eval':
        let evalStr = attrib; // Copy
        evalStr.shift(); // Remove command
        evalStr = evalStr.toString(); // Change to string
        evalStr = evalStr.replaceAll(',', ' '); // Yes, this needs to be improved but it works for now
        
        eval(evalStr); // Evaluate now.
        
        console.newLine(); // Add a new line
        
        break; // A Wrapper for eval, no safe guards because users are not implemented yet.
        
      case 'fepkg':
        let flags = attrib;
        flags.shift(); // Remove first element
      
        const flags_ln = flags.length;
        if (flags_ln === 0) {
          console.log('<br>Fatal! No Attributes defined!');
          // To-do: show help
          break;
        } else {
          console.newLine();
          for (let i = 0; i < flags_ln; i++) {
            switch(flags[i]) {
              case '--help':
                console.log('Options:');
                console.log('&ensp;&ensp;--help: Show this menu')
                console.log('&ensp;&ensp;--list-installed: List installed packages');
                console.log('&ensp;&ensp;--list-commands: List installed commands');
                break;
              
              case '--list-installed':
                const pkg_ln = window.fepkg.installedPackages.length;
                console.log('Installed Packages:')
                for (let j = 0; j < pkg_ln; j++) {
                  console.log('&ensp;&ensp;'+window.fepkg.installedPackages[j]);
                }
              
                i = flags_ln; // Basically a break statement for the for loop
              
                break; // List installed packages
              
              case '--list-commands':
                const cmd_ln = window.fepkg.installedCommands.length;
                console.log('Installed Commands:')
                for (let j = 0; j < cmd_ln; j++) {
                  console.log('&ensp;&ensp;'+window.fepkg.installedCommands[j]);
                }
              
                i = flags_ln; // Basically a break statement for the for loop
                break;
            
              default:
                console.log('Unknown attribute: '+ flags[i]);
                break;
            }
          }
        }
      
        break; // A Package Manager for FreeExecutor (fepkg)
      
      default:
        console.log(`<br>${attrib[0]} is not a known command or program.`);
        break; // No Command Exists
    }
  }

  // textMode Terminal GUI Utilities
  let cmd_string = "";
  function parseKeyInput_textMode(event) { 
    switch(event.key) {
      case 'Backspace':
      case 'Delete':
        document.body.innerHTML = document.body.innerHTML.substring(0, document.body.innerHTML.length - 1)
        cmd_string = cmd_string.substring(0, cmd_string.length - 1)
        break;
    
      case 'Enter':
        window.fe.parseCommand(cmd_string);
        document.body.innerHTML += `root@${window.fe.hostname}>`;
        cmd_string = ""; // Reset cmd_string in ordewr to allow multiple commands
      
        window.scrollTo(0, document.body.scrollHeight); // QoL fix since this is only enabled on textMode
        break;
    
      case 'Shift':
      case 'Control':
      case 'Escape':
      case 'Meta':
      case 'Alt':
      case 'Tab':
      case 'ArrowLeft':
      case 'ArrowRight':
      case 'ArrowUp':
      case 'ArrowDown':
      case '>':
      case '<':
      case '&':
        break; // Some things to not do anything on
      
      default:
        document.body.innerHTML += event.key;
        cmd_string += event.key;
        break;
    }
  }

  // Init Code
  if (window.fe.isTextMode) {
    window.addEventListener("keydown", parseKeyInput_textMode); // Enable Key Stroke Manager

    console.log(window.fe.startupMsg); // Startup message
    document.body.innerHTML += `<br>root@${window.fe.hostname}>`; // Add first command line
  } else if (window.fe.isGraphicsMode) {
    alert('0.3 does not support graphics mode yet lol')
  }
}

_run(); // A Fix to get to the bookmarklet to work (Bookmarklets require wrapper functions)
