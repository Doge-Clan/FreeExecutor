window.addEventListener("beforeunload", function(e) {
    e.preventDefault()
    console.warning("[FEXPLOIT]: Stopped unload attempt. Is GoGuardian attempting to unload this?")
    return 'blockedunload';
});

// Variables!!!
var currstring = "";
var tmp = "";
var libraries = [];
var currstring_history=[]; // Current String History (For a later feature)

// Functions
function libnix(data){
  if (data === 'startup') {
    tmp=0;
    console.log('[LIBNIX]: Loading Startup Libraries...');
    for (var a in localStorage) {
     if (a.includes('/usr/lib/') && a.includes('.nlib') || a.includes('/usr/lib/') && a.includes('.NLIB')) {
         tmp+=1;
         libraries[libraries.length]=a;
         eval(localStorage[a]);
         localStorage('Loaded Library '+a)
     }
    }
    console.log('[LIBNIX]: Loaded '+tmp+' libraries.');
    tmp="";
  }
} // Libnix Library Manager (Runs on startup to load libraries that are in localStorage)

function boot2fe(){
 if(localStorage.getItem('/boot/sys.lnk')==null){
  let _prm=prompt('Please input the .FEBIN to autoboot');
  if(_prm===null){
    alert('No .FEBIN Listed.');
    return 0;
  }
  localStorage.setItem('/boot/sys.lnk',_prm);
 }
 // exec_ Laziness (Hopefully won't cause an exploit)
 currstring=localStorage.getItem('/boot/sys.lnk');
 exec_();
} // Autoboot a .LNK VFS File

function patchfs_(){
        console.log('Patching FS...')
        for (var a in localStorage) {
         if(a.includes("/usr/bin/")!==true&&a.includes("function")===false){
           localStorage.setItem("/usr/bin/"+a,localStorage[a])
           localStorage.removeItem(a);
           console.log('Fixed bad file '+a);
         }
        }
           // Comment Spam funny
           localStorage.removeItem('/usr/bin/getItem'); // Override Fix
           localStorage.removeItem('/usr/bin/removeItem'); // Override Fix
           localStorage.removeItem('/usr/bin/length'); // Override Fix
           localStorage.removeItem('/usr/bin/key'); // Override Fix
           localStorage.removeItem('/usr/bin/clear'); // Override Fix
           localStorage.removeItem('/usr/bin/setItem'); // Override Fix
           if (localStorage.getItem('/AUTOLOAD/BOOT.lnk')!='null') {
             localStorage.setItem('/boot/sys.lnk',localStorage.getItem('/AUTOLOAD/BOOT.lnk'));
             localStorage.removeItem('/AUTOLOAD/BOOT.lnk');
           } // 0.2.0 POSIX Update if you are running an old copy of FreeExecutor (Why would you be using 0.1.X anyways?)
           console.log('Patched FS to 0.2.0 standards.')
           return 'DONE';  
} // PatchFS moved to its own function due to scope of Program (FS Work is hard!)

function exec_() {
    currstring_history[currstring_history.length]=currstring; // WIP for Command History which might be a nice QoL feature
    if (currstring.includes(".FEBIN") || currstring.includes(".febin") || currstring.includes("/usr/bin/")) {
        if (tmp = localStorage.getItem(currstring), null === tmp) return tmp = "", alert("No .FEBIN Was Found under this name."), 2; // Minified Null Checker? WTF?
        document.body.removeEventListener("keydown", keyMGR192B_); // Fix an unload glitch for apps that don't hook in funny ways into the base program
        eval(tmp); // eval can't be harmful if used right.
        tmp = "";
        document.body.addEventListener("keydown", keyMGR192B_); // We have to reload this to ensure that the environment still works lol.
        console.log(".FEBIN Executed."); 
    } else if ("savebin" === currstring || "/usr/bin/savebin" === currstring) {
        tmp = prompt("What is the name of this program?")
        if(tmp.includes(".FEBIN")===false && tmp.includes(".febin")===false) {
           tmp += ".febin"
        }
        if(tmp.includes("/usr/bin/")===false) {
          tmp = "/usr/bin/"+tmp; // Update to 0.2.0 format! (POSIX Update)
        }
        let e = prompt("Please paste the minified FEBIN Contents to save.");
        localStorage.setItem(tmp, e);
        tmp = "";
    } else if ("boot2fe" === currstring || "/usr/bin/boot2fe" === currstring) {
        boot2fe(); // You can call boot2fe :P
    } else if ("patchfs" === currstring || "/usr/bin/patchfs" === currstring) {
        patchfs_();
    } else if (currstring.includes("echo") || currstring.includes("/usr/bin/echo")) {
        let tx;
        if (currstring.includes("/usr/bin/echo")) {
          tmp=currstring.split("/usr/bin/echo ")
        } else {
          tmp=currstring.split("echo ")
        }
          tx=tmp.slice(1)
          alert(tx)
          tmp='';
          tx=null; // Goodbye TX! Barely knew ye.

    } else if ("/usr/lib/" === currstring) {
       alert(currstring+' is a directory.')
    } else {
       alert("Unknown Command"); // What else did you expect?
    }
} // exec_ loop (TO-DO: OPTIMIZE CODE)

function keyMGR192B_(e) {
    let key = e.key; // "a", "1", "Shift", etc.
    let isCapital;
    let terminal=document.getElementById("terminal");
    if (/^[a-z]$/i.test(key)) { // or if (key.length === 1 && /[a-z]/i.test(key))
        isCapital = e.shiftKey;
    }
      if (isCapital) {
        currstring += key;
        document.getElementById("terminal").innerHTML += key;
      } else {
        if (e.keyCode>=16&&e.keyCode<=18||e.keyCode>=37&&e.keyCode<=40) {
          return 0; // Fixes some bad input issues with the (better) key manager
        } else if (e.keyCode === 8) {
          tmp=currstring.slice(0, -1);
          currstring=tmp;
          tmp=null;
          terminal.innerHTML = currstring;
          return 0; // We don't want it saying "backspace" everytime we want to delete a letter.
        } else if (e.keyCode === 13) {
          exec_(); // Execute
          currstring="";
          terminal.innerHTML = currstring;
          return 0;
        }
        currstring += key.toLowerCase();
        terminal.innerHTML += key.toLowerCase();
      }
} // New from Slow Inc. is the *NEW* Ultra Slow Key Manager. For the Nintendo Wii!

function shell16A3_() {
    document.body.id = "_shell";
    document.head.innerHTML += '<title>FreeExecutor 0.2.0 Shell</title><style>body{background:rgb(20,20,40);color:white;font-family:"IBM Plex Mono",monospace;font-size:14px;overflow:hidden;min-height:100vh;}</style><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono&display=swap" rel="stylesheet">'; 
    document.body.innerHTML += '<span id="_bootmark"> FreeExecutor 0.2.0 <br> (C) 2021 Doge Clan, All Rights Reserved <br> <br> </span>> <span id="terminal"></span> ';
    document.body.addEventListener("keydown", keyMGR192B_)
} // Fullscreen shell

function init_() {
    document.head.innerHTML = "";
    document.body.innerHTML = "";
    if(localStorage.getItem('/boot/sys.lnk')!==null) {
      boot2fe();
    } // Check if we can boot to a .FEBIN file (This can help with many things)
    libnix('startup'); // Start libnix module (Library Manager for /usr/lib/ library files)
    shell16A3_();
}

init_();
